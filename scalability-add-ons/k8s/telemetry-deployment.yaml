# Kubernetes deployment configuration for Network Telemetry Service
# Includes auto-scaling, high availability, and resource management

apiVersion: v1
kind: Namespace
metadata:
  name: telemetry-system
  labels:
    name: telemetry-system

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: telemetry-config
  namespace: telemetry-system
data:
  TARGET_FQDN: "google.com,github.com,cloudflare.com,netflix.com"
  MONITORING_INTERVAL: "60"
  INFLUXDB_ORG: "nflx"
  INFLUXDB_BUCKET: "default"
  LOG_LEVEL: "INFO"
  # Scaling configuration
  MAX_CONNECTIONS: "100"
  MAX_CONCURRENT_TARGETS: "50"
  MAX_CONCURRENT_OPERATIONS: "100"
  CIRCUIT_FAILURE_THRESHOLD: "5"
  CIRCUIT_RECOVERY_TIMEOUT: "60"
  BATCH_SIZE: "10"
  WORKER_POOL_SIZE: "20"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: telemetry-secrets
  namespace: telemetry-system
type: Opaque
stringData:
  INFLUXDB_TOKEN: "your-influxdb-token-here"
  INFLUXDB_PASSWORD: "admin123!"
  GF_SECURITY_ADMIN_PASSWORD: "admin123!"
  GF_SECURITY_SECRET_KEY: "your-secret-key-here"
  GOOGLE_CLIENT_ID: "your-google-client-id"
  GOOGLE_CLIENT_SECRET: "your-google-client-secret"

---
# InfluxDB StatefulSet for persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: influxdb
  namespace: telemetry-system
spec:
  serviceName: influxdb
  replicas: 2
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
    spec:
      containers:
      - name: influxdb
        image: influxdb:2.7
        ports:
        - containerPort: 8086
          name: http
        env:
        - name: DOCKER_INFLUXDB_INIT_MODE
          value: "setup"
        - name: DOCKER_INFLUXDB_INIT_USERNAME
          value: "admin"
        - name: DOCKER_INFLUXDB_INIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: telemetry-secrets
              key: INFLUXDB_PASSWORD
        - name: DOCKER_INFLUXDB_INIT_ORG
          valueFrom:
            configMapKeyRef:
              name: telemetry-config
              key: INFLUXDB_ORG
        - name: DOCKER_INFLUXDB_INIT_BUCKET
          valueFrom:
            configMapKeyRef:
              name: telemetry-config
              key: INFLUXDB_BUCKET
        volumeMounts:
        - name: influxdb-storage
          mountPath: /var/lib/influxdb2
        - name: influxdb-config
          mountPath: /etc/influxdb2
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /ping
            port: 8086
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8086
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
  volumeClaimTemplates:
  - metadata:
      name: influxdb-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi
  - metadata:
      name: influxdb-config
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---
# InfluxDB Service
apiVersion: v1
kind: Service
metadata:
  name: influxdb
  namespace: telemetry-system
spec:
  selector:
    app: influxdb
  ports:
  - port: 8086
    targetPort: 8086
    name: http
  type: ClusterIP

---
# InfluxDB LoadBalancer Service (external access)
apiVersion: v1
kind: Service
metadata:
  name: influxdb-external
  namespace: telemetry-system
spec:
  selector:
    app: influxdb
  ports:
  - port: 8086
    targetPort: 8086
    name: http
  type: LoadBalancer

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: telemetry-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: telemetry-secrets
              key: GF_SECURITY_ADMIN_PASSWORD
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: telemetry-secrets
              key: GF_SECURITY_SECRET_KEY
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: telemetry-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: telemetry-system
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  type: LoadBalancer

---
# Network Telemetry Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-telemetry
  namespace: telemetry-system
  labels:
    app: network-telemetry
spec:
  replicas: 3
  selector:
    matchLabels:
      app: network-telemetry
  template:
    metadata:
      labels:
        app: network-telemetry
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: telemetry
        image: network-telemetry:latest
        ports:
        - containerPort: 8080
          name: metrics
        env:
        - name: INSTANCE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: INFLUXDB_URL
          value: "http://influxdb:8086"
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: telemetry-secrets
              key: INFLUXDB_TOKEN
        envFrom:
        - configMapRef:
            name: telemetry-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import requests; requests.get('http://influxdb:8086/ping', timeout=5)"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - scripts/testing/docker_health_check.py
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}

---
# Network Telemetry Service
apiVersion: v1
kind: Service
metadata:
  name: network-telemetry
  namespace: telemetry-system
  labels:
    app: network-telemetry
spec:
  selector:
    app: network-telemetry
  ports:
  - port: 8080
    targetPort: 8080
    name: metrics
  type: ClusterIP

---
# Horizontal Pod Autoscaler for Network Telemetry
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: network-telemetry-hpa
  namespace: telemetry-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: network-telemetry
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: telemetry_collection_duration_seconds
      target:
        type: AverageValue
        averageValue: "30"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
# Vertical Pod Autoscaler for InfluxDB
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: influxdb-vpa
  namespace: telemetry-system
spec:
  targetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: influxdb
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: influxdb
      minAllowed:
        cpu: 500m
        memory: 1Gi
      maxAllowed:
        cpu: 4000m
        memory: 8Gi
      controlledResources: ["cpu", "memory"]

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: network-telemetry-pdb
  namespace: telemetry-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: network-telemetry

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: influxdb-pdb
  namespace: telemetry-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: influxdb

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: telemetry-network-policy
  namespace: telemetry-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: telemetry-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  - to: []  # Allow all egress for external monitoring targets