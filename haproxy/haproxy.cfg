# HAProxy Configuration for Network Telemetry Service High Availability
# Load balances between multiple InfluxDB and Grafana instances

global
    daemon
    log stdout local0 info
    
    # Performance tuning
    maxconn 4096
    nbthread 4
    
    # Security
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    
    # Stats socket for monitoring
    stats socket /var/lib/haproxy/stats mode 600 level admin

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    
    # Health checks
    option httpchk
    
    # Error handling
    retries 3
    
    # Load balancing algorithm
    balance roundrobin

# HAProxy Statistics Page
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    
    # Show detailed information
    stats show-legends
    stats show-desc "Network Telemetry Service Load Balancer"

# InfluxDB Load Balancer
frontend influxdb_frontend
    bind *:8086
    default_backend influxdb_servers
    
    # Request logging
    capture request header Host len 32
    capture request header User-Agent len 64
    
    # Health check endpoint
    monitor-uri /haproxy-health

backend influxdb_servers
    # Health check configuration
    option httpchk GET /ping
    http-check expect status 204
    
    # Connection settings
    option tcp-check
    
    # Server definitions
    server influxdb-1 influxdb-1:8086 check inter 30s rise 2 fall 3 weight 100
    server influxdb-2 influxdb-2:8086 check inter 30s rise 2 fall 3 weight 100
    
    # Backup server (if needed)
    # server influxdb-backup influxdb-backup:8086 check inter 30s backup

# Grafana Load Balancer
frontend grafana_frontend
    bind *:3000
    default_backend grafana_servers
    
    # Session persistence (sticky sessions)
    cookie GRAFANA_SESSION insert indirect nocache
    
    # Request logging
    capture request header Host len 32
    capture request header User-Agent len 64

backend grafana_servers
    # Health check configuration
    option httpchk GET /api/health
    http-check expect status 200
    
    # Session affinity for Grafana
    cookie GRAFANA_SESSION prefix indirect nocache
    
    # Server definitions with session cookies
    server grafana-1 grafana-1:3000 check inter 30s rise 2 fall 3 weight 100 cookie grafana1
    server grafana-2 grafana-2:3000 check inter 30s rise 2 fall 3 weight 100 cookie grafana2

# Additional frontend for HTTP redirect and routing
frontend http_frontend
    bind *:80
    
    # ACLs for routing
    acl is_grafana path_beg /grafana
    acl is_influx path_beg /influx
    acl is_stats path_beg /stats
    
    # Routing rules
    use_backend grafana_servers if is_grafana
    use_backend influxdb_servers if is_influx
    use_backend stats_backend if is_stats
    
    # Default to Grafana
    default_backend grafana_servers

# Backend for stats (internal)
backend stats_backend
    server stats-local 127.0.0.1:8404 check

# Error pages
errorfile 400 /usr/local/etc/haproxy/errors/400.http
errorfile 403 /usr/local/etc/haproxy/errors/403.http
errorfile 408 /usr/local/etc/haproxy/errors/408.http
errorfile 500 /usr/local/etc/haproxy/errors/500.http
errorfile 502 /usr/local/etc/haproxy/errors/502.http
errorfile 503 /usr/local/etc/haproxy/errors/503.http
errorfile 504 /usr/local/etc/haproxy/errors/504.http